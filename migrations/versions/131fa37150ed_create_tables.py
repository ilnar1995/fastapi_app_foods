"""create tables

Revision ID: 131fa37150ed
Revises: 
Create Date: 2023-06-21 11:21:20.602822

"""
from alembic import op
import sqlalchemy as sa
import csv
import os
from src.menu.models import foods, categoryes, foodstoppings, toppings


# revision identifiers, used by Alembic.
revision = '131fa37150ed'
down_revision = None
branch_labels = None
depends_on = None

def add_default_data():
    dir_path = os.path.dirname(os.path.realpath(__file__))
    print(dir_path)

    fhand_categorys = open(dir_path+'/default_food_category.csv')
    reader_categorys  = csv.reader(fhand_categorys)
    category_list = []
    for row in reader_categorys:
        row[2] = True if row[2] =='true' else False
        category_list.append({"id": int(row[0]), "name": row[1], "is_publish": row[2]})
    op.bulk_insert(categoryes, category_list)

    fhand_foods = open(dir_path+'/default_food.csv')
    reader_foods = csv.reader(fhand_foods)
    foods_list = []
    for row in reader_foods:
        row[4] = True if row[4] == 'true' else False
        row[5] = True if row[5] == 'true' else False
        row[6] = True if row[6] == 'true' else False
        foods_list.append({"id": int(row[0]), "description": row[1], "price": int(row[2]), "name": row[3], "is_special": row[4], "is_vegan": row[5], "is_publish ": row[6], "category_id": int(row[7])})
    op.bulk_insert(foods, foods_list)

    fhand_toppings = open(dir_path+'/default_topping.csv')
    reader_toppings = csv.reader(fhand_toppings)
    toppings_list = []
    for row in reader_toppings:
        toppings_list.append({"id": int(row[0]), "name": row[1]})
    op.bulk_insert(toppings, toppings_list)

    fhand_foods_toppings = open(dir_path+'/default_food_topping.csv')
    reader_foods = csv.reader(fhand_foods_toppings)
    foods_toppings_list = []
    for row in reader_foods:
        foods_toppings_list.append({"id": int(row[0]), "food_id": int(row[1]), "topping_id": int(row[2])})
    op.bulk_insert(foodstoppings, foods_toppings_list)



def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('food_category',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=350), nullable=True),
    sa.Column('is_publish', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_food_category_id'), 'food_category', ['id'], unique=True)
    op.create_table('topping',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=350), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_topping_id'), 'topping', ['id'], unique=True)
    op.create_table('food',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('price', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=350), nullable=True),
    sa.Column('is_special', sa.Boolean(), nullable=False),
    sa.Column('is_vegan', sa.Boolean(), nullable=False),
    sa.Column('is_publish', sa.Boolean(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['food_category.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_food_id'), 'food', ['id'], unique=True)
    op.create_table('food_topping',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('food_id', sa.Integer(), nullable=True),
    sa.Column('topping_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['food_id'], ['food.id'], ),
    sa.ForeignKeyConstraint(['topping_id'], ['topping.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###

    add_default_data()

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('food_topping')
    op.drop_index(op.f('ix_food_id'), table_name='food')
    op.drop_table('food')
    op.drop_index(op.f('ix_topping_id'), table_name='topping')
    op.drop_table('topping')
    op.drop_index(op.f('ix_food_category_id'), table_name='food_category')
    op.drop_table('food_category')
    # ### end Alembic commands ###
